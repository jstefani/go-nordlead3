package nordlead3

import (
	"bytes"
	"errors"
	"fmt"
	"testing"
)

const (
	invalidPerformance
	invalidProgram
	validPerformance
	validPerformanceBank     = 1
	validPerformanceLocation = 2
	validPerformanceName     = "Orchestra     HN"
	validPerformanceVersion  = 1.20
	validProgram
	validProgramBank         = 2
	validProgramLocation     = 2
	validProgramName         = "Welcome         "
	validProgramVersion      = 1.20
)

func TestDumpSysex(t *testing.T) {
	memory := new(PatchMemory)
	inputSysex := stringToBytes(validProgram)
	inputSysexStruct, err := ParseSysex(inputSysex)
	if err != nil {
		t.Errorf("Test sysex seems incorrect, need valid sysex to test dumping: %q", err)
	}
	programSysex := inputSysexStruct.rawBitstream()

	err = memory.LoadFromSysex(inputSysex)
	if err != nil {
		t.Errorf("Test sysex seems incorrect, need valid sysex to test dumping: %q", err)
	}
	program := memory.Programs[validProgramBank][validProgramLocation].Program

	outputSysex, err := program.dumpSysex()
	if err != nil {
		t.Errorf("Error dumping program: %q", err)
	}

	// Use string format for quick equal comparison
	if bytesToString(*outputSysex) != bytesToString(programSysex) {
		decodedPS := unpackSysex(programSysex)
		decodedOS := unpackSysex(*outputSysex)
		fmt.Printf("Input:  %x\n", decodedPS)
		fmt.Printf("Output: %x\n", decodedOS)

		location, explanation := locationOfDifference(decodedPS, decodedOS)
		t.Errorf("Dumped sysex does not match input at offset %d (%d): %q", location, location*8, explanation)
	}
}

func TestPackAndUnpackSysex(t *testing.T) {
	sysex, _ := ParseSysex(stringToBytes(validProgram))
	bitsToRepack := sysex.decodedBitstream
	repackedBits := unpackSysex(packSysex(bitsToRepack))

	if string(bitsToRepack) != string(repackedBits) {
		t.Errorf("Pack and Unpack not symmetric: %x / %x", tailBytes(bitsToRepack, 8), tailBytes(repackedBits, 8))
	}
}

// Utilities

func stringToBytes(s string) []byte {
	var result []byte
	fmt.Sscanf(s, "%X", &result)
	return result
}

func bytesToString(b []byte) string {
	return fmt.Sprintf("%x", b)
}

func locationOfDifference(b1, b2 []byte) (int, error) {
	r1 := bytes.NewReader(b1)
	r2 := bytes.NewReader(b2)
	i := 0

	for {
		c1, err1 := r1.ReadByte()
		c2, err2 := r2.ReadByte()
		if c1 == c2 && err1 == err2 {
			// skip
		} else {
			minIndex := max(0, i-5)
			maxIndex1 := min(i+5, len(b1))
			maxIndex2 := min(i+5, len(b2))
			explanation := fmt.Sprintf("Bytes 1: %x^%x | Bytes 2: %x^%x", b1[minIndex:i], b1[i:maxIndex1], b2[minIndex:i], b2[i:maxIndex2])
			return i, errors.New(explanation)
		}
		i++
	}
}

func min(x, y int) int {
	if x < y {
		return x
	}
	return y
}

func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}

func tailBytes(buf []byte, n int) []byte {
	start := max(0, len(buf)-n)
	return buf[start:]
}
